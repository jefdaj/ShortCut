tuesday:

  sanitize fasta ids:
    design/think it through
    when loading fasta files:
      replace seqids with hashes
      create a hash -> seqid map for each fasta
      write the map to a cache dir with the filename hash
      add to a global map for putting them back later
    when printing:
      get the text to print same as now
      then find and replace the hashes in it before actually printing
    start by only undoing the hashes at the end, then move to every step if fast + easy
    when making a named variable:
      replace final symlink with read + write unhashed in vars/
    make sure tests still pass except the trees will be different of course
      x test before for comparison (fails on laptop already)
      test after and make sure the same things still pass
    steps to get there:
      x add it to the CutState and fix all the resulting type errors, but don't use it yet
      x read into it from aLoadHash without altering the files yet
      x write it to multiple tmpfiles while creating it based on the relevant load hashes
      x use it to put the IDs back when printing
      use it to put the IDs back when writing named vars
      see how the tests fared and fix any errors

  sonicparanoid module
    needs IDs sanitized first, probably
    scaffolding


sunday:

  diamond module
    read manual
      handles temporary files itself; output only appears at the end and is thrown away if inturrupted
      looks to be deterministic! same input -> same output according to the author
      things that can be set to speed it up/improve results:
        -e as low as possible
        -k as low as possible, or use --top instead
      later, optional taxonomy features?
      looks to be multithreaded by default
      any need to set the scoring matrix?
      can output the same regular blast results. winning!
        but there's an intermediate DAA (diamond alignment archive) format too. not sure if needed?
      can gzip the output
    x test running diamond and getting blast output
    x write scaffolding code
    x write useful functions
      x diamond_makedb
      x diamond_makedb_all
      x search variants: fasta + db, regular + sensitive + more sensitive, blastp + blastx
        x diamond_blastp
        x diamond_blastp_db
        x diamond_blastx
        x diamond_blastx_db
        x diamond_blastp_sensitive
        x diamond_blastp_db_sensitive
        x diamond_blastp_more_sensitive
        x diamond_blastp_db_more_sensitive
        x diamond_blastx_sensitive
        x diamond_blastx_db_sensitive
        x diamond_blastx_more_sensitive
        x diamond_blastx_db_more_sensitive
      x something to load existing databases? maybe not important yet
    x print data:
      x diamond dbinfo to print dbs
      x diamond view to print results
    x write tests
      test dependency

  mmseqs module

    read about it
      should i be working with plass + linclust to get protein sequences from metagenomics datasets?
        cool for later, maybe
        megahit + prodigal is the standard alternative
      does a large number of things with a lot of internal commands
        looks like it can act like blast or psi-blast, but is also for clustering?
      can do easy-clust from fasta, but generally want to convert to mmseq db first?
        database is multiple files like blast
        is there a different kind of db file for each function output?
      there are "update" functions which in shortcut should copy + update
      any way to get it working on the demo server? if not, might be a reason to get a new one eventually
        should be doable from lab funds really!
        might not need it tho, only missing avx2 but SSE4.1 is ok
          just need to add a compiler flag?
      might require up to 500GB free space for large runs? i can get that if needed
      example use here: https://github.com/soedinglab/MMseqs2/issues/79

      read the readme
      skim the paper

    try some functions
      try the webserver!
      make sure you understand how the db stuff works

    x write scaffolding code

    write useful functions
      variants: regular and _db like blast
      variants: sensitive, default, fast, faster?
      x test dependency and abort if illegal instruction
      do these first:
        mmseqs_createdb
        mmseqs_search
      then the rest if needed:
        mmseqs_easy_search
        mmseqs_easy_cluster
        mmseqs_easy_linclust?
        mmseqs_createseqfiledb?
        mmseqs_cluster? not sure if needed
        mmseqs_result2flat
        mmseqs_mergeclusters?
        mmseqs_search_profile (with --iterations)?

    write tests
