could typeclasses be a way forward to typed modules?
see the lambda the ultimate post about gadts vs type classes
each new function could be defined as a new data type with a ShortCutFunction instance (compile, explain, etc)
parser could do the current thing where it gets a list of functions with names, except it would be a map
  maybe the module itself is a map of function name -> function or something like that
the individual data types could maybe even be gadts. is that silly?
wait, but how does the parser know how to construct them? they'd all have to take a list of types
	which is basically how it works now. any advantage?
or could have a parser function as part of the instance, like mkParser "load_fasta" [str]
	then the main function parser just tries all of them until one works
	ooh, could have another function actually generate the parser, and the instance is just the list of types
		like typesAccepted :: [gens, goms, num], typeReturned :: gens
but still, what's the major advantage? just that the parser is checked for properly comparing the lists?
	if there's nothing beyond that, don't bother with it!
	is there?
		well i guess transformations on the AST are also guaranteed to be valid
another way to think of it is, i'm pretty sure this can't be implemented without either:
	operating on a value-level haskell list of shortcut types
	using type-level lists of haskell types that are also shortcut types
	... so really you should figure out if type level lists work and are useful before continuing (see glambda)
		holy shit, shit looks completely crazy and impenetrable. don't use unless that changes!
		just use haskell values for shortcut types, which makes complete sense and is pretty easy

TAKEAWAY: WRITE THIS IN THE NOTEBOOK AND FILE IT AWAY FOR AFTER YOUR FIRST COMMITTEE MEETING! GET TO IT :D
